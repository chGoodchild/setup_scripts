#! /bin/bash

cwd=$(pwd)

# cd ~/checkout/everest-workspace/everest-core/build
# ./../run_sil.sh

cd ~/
# rm -rf libocpp
# git clone https://github.com/EVerest/libocpp
cd libocpp

rm -rf build
# The header files aren't autogenerated correctly yet...
# rm -rf ~/checkout/everest-workspace/everest-core/build/generated
mkdir build && cd build
cmake .. -GNinja -DCMAKE_BUILD_TYPE=Debug
ninja install

cd $cwd
cp ocpp/config.json ~/libocpp/aux/config.json

cd ~/libocpp/build
./dist/bin/charge_point --maindir ./dist/ocpp --conf config.json

# register_cancel_reservation_callback
# https://github.com/EVerest/everest-core/blob/main/modules/OCPP/OCPP.cpp
# In everest core:
# evclean to regenerate OCPP module
# mod update
# shouldn't build at this point
# https://github.com/EVerest/everest-core/blob/dbc407d63f2fba1fcca07add0a226491d8b91a35/modules/EvseManager/evse/evse_managerImpl.cpp#L164-L167
# Disabled := unavailable https://github.com/EVerest/everest-core/blob/dbc407d63f2fba1fcca07add0a226491d8b91a35/modules/EvseManager/EvseManager.cpp#L86-L87
# Username: admin
# Password: 1234

# chargeboxID: cp001
# ID tag: 123

# reserve now & cancel reservation
# evse_manager has an API for this

# Doxygen for all publich methods

# auth_validator: authentication of the charge process

# ocpp-1.6 edition 2.pdf / 3.11 Reservations
# Spec: Store in memory or not?
# Notify the evse_manager
# libocpp has an SQLite database incase it's needed

# will need a register_..._callback function
# Reserve now and cancel reservation:
# https://github.com/EVerest/everest-core/blob/main/interfaces/evse_manager.json
# https://github.com/EVerest/everest-core/blob/main/modules/EvseManager/EvseManager.hpp
# https://github.com/EVerest/everest-core/blob/main/modules/OCPP/manifest.json

# Using: https://github.com/EVerest/libocpp/blob/main/aux/config-docker-tls.json
# our extras: Internal

# Reservation would be added as a new property in: https://github.com/EVerest/libocpp/blob/main/aux/profile_schemas/ocpp1_6/Config.json
# https://github.com/EVerest/libocpp/blob/main/aux/profile_schemas/ocpp1_6/Reservation.json
# checkout json schema documentation - add config id

# JSON schema adds additional style requirements (core.json: defines how the configs should look: https://github.com/EVerest/libocpp/blob/main/aux/profile_schemas/ocpp1_6/Core.json)
# reservation is not part of core.json, though it must be part of config.json

# checkout: https://github.com/EVerest/libocpp/tree/main/include
# Reserve now: https://github.com/EVerest/libocpp/blob/main/include/ocpp1_6/messages/ReserveNow.hpp
# Request and Response
# All the messages already exist

# JSON schemas: https://drive.google.com/drive/u/2/folders/1Tnp3ayNfCFI50Ozgs4uOuqfs-QzPH4CH
# Generates C++ code out of the schemas: https://github.com/EVerest/libocpp/blob/main/src/code_generator/generate_cpp.py

# Chargepoint callbacks: https://github.com/EVerest/libocpp/blob/1818b83748227d05d6bfc2849a9940eefea680c0/include/ocpp1_6/charge_point.hpp#L86-L90
# Already started: https://github.com/EVerest/libocpp/blob/1818b83748227d05d6bfc2849a9940eefea680c0/include/ocpp1_6/charge_point.hpp#L220
# https://github.com/EVerest/libocpp/blob/1818b83748227d05d6bfc2849a9940eefea680c0/include/ocpp1_6/charge_point.hpp#L224
# https://github.com/EVerest/libocpp/blob/1818b83748227d05d6bfc2849a9940eefea680c0/lib/ocpp1_6/charge_point.cpp#L1629-L1632
# Add the implementation: https://github.com/EVerest/libocpp/blob/1818b83748227d05d6bfc2849a9940eefea680c0/lib/ocpp1_6/charge_point.cpp#L1631

# https://github.com/EVerest/libocpp/blob/1818b83748227d05d6bfc2849a9940eefea680c0/lib/ocpp1_6/charge_point.cpp#L450
# Add reserve after this: https://github.com/EVerest/libocpp/blob/1818b83748227d05d6bfc2849a9940eefea680c0/lib/ocpp1_6/charge_point.cpp#L552

# Example in: data_transfer_request (on Kai's branch)
# handleReserveNowRequest(Call<REserveNowRequest> call) {
#    call...
#
# }

# Start with handle function

# Run this in the build directory of OCPP:
# https://github.com/EVerest/libocpp/blob/main/run-docker-tls.sh
# Connects to steve and shows the log message to confirm that it works.
# https://127.0.0.1:8443/steve/manager/operations/tasks/4

# Then start the run script and call it from steve, without having to modify the glue code

# steve/operations/ocpp v1.6


<<COMMENT
2022-03-23 12:50:04.283968 charge_point [0x001026b2] [DEBUG] {0x00007f670884d700} void ocpp1_6::ChargePoint::message_callback(const string&) ../lib/ocpp1_6/charge_point.cpp:452: Received Message: [2,"2330778b-3013-4455-b73a-63f4111ff760","ReserveNow",{"connectorId":1,"expiryDate":"2022-03-24T00:00:00.000Z","idTag":"123","reservationId":16}]
2022-03-23 12:50:04.284086 charge_point [0x001026b2] [DEBUG] {0x00007f670884d700} void ocpp1_6::ChargePoint::handleReserveNowRequest(ocpp1_6::Call<ocpp1_6::ReserveNowRequest>) ../lib/ocpp1_6/charge_point.cpp:1218: Received ReserveNowRequest: {
    "connectorId": 1,
    "expiryDate": "2022-03-24T00:00:00.000Z",
    "idTag": "123",
    "reservationId": 16
}
with messageId: 2330778b-3013-4455-b73a-63f4111ff760
2022-03-23 12:50:04.284124 charge_point [0x001026b2] [DEBUG] {0x00007f670884d700} void ocpp1_6::ChargePoint::handleReserveNowRequest(ocpp1_6::Call<ocpp1_6::ReserveNowRequest>) ../lib/ocpp1_6/charge_point.cpp:1219: call: [
    2,
    "2330778b-3013-4455-b73a-63f4111ff760",
    "ReserveNow",
    {
        "connectorId": 1,
        "expiryDate": "2022-03-24T00:00:00.000Z",
        "idTag": "123",
        "reservationId": 16
    }
]
2022-03-23 12:50:04.284162 charge_point [0x001026b2] [DEBUG] {0x00007f670884d700} bool ocpp1_6::Websocket::send(const string&) ../lib/ocpp1_6/websocket.cpp:142: Sent message over TLS websocket: [3,"2330778b-3013-4455-b73a-63f4111ff760",{"status":"Accepted"}]
COMMENT

# Build here: /home/pachai/checkout/everest-workspace/libocpp/build
# ./../run-docker-tls.sh

# SQlite database

# Cornelius's code: ~/checkout/everest-workspace/everest-core/modules/EvseManager/evse/evse_managerImpl.cpp
#                   ~/checkout/everest-workspace/everest-core/modules/EvseManager/evse/evse_managerImpl.hpp
#                   ~/checkout/everest-workspace/everest-core/modules/EvseManager/evse/evse_manager.json


<<COMMENT

    // unavailable = faulted

    // Else:
    // Return rejected if configured not to accept reservations

    // If reserved: refuse charging unless if the incoming idTag or parent idTag match that of the reservation.

    // if transaction starts for reserved idTag or reserved connector or any connector when connid == 0:
    //     terminate charge point
    //
    // if expiryDate time is reached:
    //     terminate charge point

    // if chargepoint or connector are faulted / unavailable:
    //     terminate charge point

    // If reserved idTag is started:
    //     the chargepoint sends reservationId in the StartTransaction.req PDU (see start Transaction)
    //     to notify the central system that the reservation is terminated.

    // when reservation expires:
    //     terminate the reservation and make connector available
    //     notify the central system that the reserved connector is now available

    // if authorization cache exists:
    //     update the cache entry upon receiving reserveNow.conf
    //     incase it is not already in the Local Authorization List (Authorization Cache)

    // Before starting the transaction:
    //     Validate the identifier with authorize.req after receiving ReserveNow.req.

    // Evsim_manager

COMMENT
